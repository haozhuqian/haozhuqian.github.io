<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>词法作用域</title>
    <link href="/2023/02/21/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2023/02/21/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h1><p>作用域有有两种工作模型，词法作用域与动态作用域，后者不太常用，这里主要了解前者。</p><h2 id="2-1词法阶段"><a href="#2-1词法阶段" class="headerlink" title="2.1词法阶段"></a>2.1词法阶段</h2><p>大部分的标准语言编译器第一个工作阶段叫做词法化。这个过程中会对源代码中的字符经常检查，如果是有状态的解析过程，还会赋予单词语义。</p><p><strong>词法作用域</strong>就是定义在词法阶段的作用域，或者说就是在你写代码时将变量和块作用域写在哪里来决定，因此词法分析器处理代码时作用域也不会变（大部分情况）。</p><p>举个例子</p><p><img src="https://good-money.oss-cn-beijing.aliyuncs.com/blog-imgs/202302211905408.png" alt="image-20230221190458315"></p><p>在这个例子中可以看做有三层逐级嵌套的作用域。</p><p>1 包含着整个全局作用域，其中只有一个标识符：foo。</p><p>2 包含着 foo 所创建的作用域，其中有三个标识符：a、bar 和 b。</p><p>3 包含着 bar 所创建的作用域，其中只有一个标识符：c。</p><p>作用域气泡由其对应的作用域块代码写在哪里决定，它们是逐级包含的。不存在一个函数的作用域气泡同时出现在两个外部作用域气泡中。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>作用域查找会在找到第一个匹配的标识符时停止。在多层嵌套作用域中内部与外部标识符同名时，外部标识符无法被访问。</p><p>作用域查找始终从最内部作用域开始，逐层向外查询，直到找到匹配的标识符。</p><p>全局变量会自动成为全局对象的属性，因此可以用对全局对象的属性引用来访问被屏蔽的全局变量，但非全局的被屏蔽变量无论如何都无法被内部访问。</p><p>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处</p><p>的位置决定。</p><p>词法作用域查找只会查找一级标识符，比如 a、b 和 c。如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。</p><h2 id="2-2欺骗词法"><a href="#2-2欺骗词法" class="headerlink" title="2.2欺骗词法"></a>2.2欺骗词法</h2><p>JS中有两种机制实现欺骗词法作用域，这并不被推荐，同时这也会导致性能下降。</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>JS中的 eval(..) 函数可以结合搜一个字符串作为参数，并且将其中的内容视为好像在书写时就存在于程序中这个位置的代码。或者说，可以在你的代码中用程序生成代码并运行，就好像是之前写好的一样。这个函数一般被用来执行动态创建代码。</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">str, a</span>) &#123; <br> <span class="hljs-built_in">eval</span>( str ); <span class="hljs-comment">// 欺骗！</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a, b ); <br>&#125; <br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>; <br><span class="hljs-title function_">foo</span>( <span class="hljs-string">&quot;var b = 3;&quot;</span>, <span class="hljs-number">1</span> ); <span class="hljs-comment">// 1, 3</span><br></code></pre></td></tr></table></figure><p>这段代码中，由于传入的字符串创建了一个内部变量 b 屏蔽了外层作用域中的 b，实际上修改了 foo(..)的词法作用域。</p><p>默认情况下，如果 eval(..) 中所执行的代码包含有一个或多个声明（无论是变量还是函数），就会对 eval(..) 所处的词法作用域进行修改。</p><p>在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其中的声明无法修改所在的作用域。</p><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">str</span>) &#123; <br> <span class="hljs-string">&quot;use strict&quot;</span>; <br> <span class="hljs-built_in">eval</span>( str ); <br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a ); <span class="hljs-comment">// ReferenceError: a is not defined</span><br> &#125; <br> <span class="hljs-title function_">foo</span>( <span class="hljs-string">&quot;var a = 2&quot;</span> );<br></code></pre></td></tr></table></figure><p>JavaScript 中 还 有 其 他 一 些 功 能 效 果 和 eval(..) 很 相 似。setTimeout(..) 和setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。不要使用它们！</p><p>new Function(..) 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数（前面的参数是这个新生成的函数的形参）。这种构建函数的语法比eval(..) 略微安全一些，但也要尽量避免使用。</p><p>在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。</p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>with关键字可以将一个对象处理为一个完全隔离的词法作用域，这个对象的属性将会被处理为定义在这个定义域中的词法标识符。</p><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">obj</span>) &#123; <br> <span class="hljs-keyword">with</span> (obj) &#123; <br> a = <span class="hljs-number">2</span>; <br> &#125; <br>&#125; <br><span class="hljs-keyword">var</span> o1 = &#123; <br> <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> <br>&#125;; <br><span class="hljs-keyword">var</span> o2 = &#123; <br> <span class="hljs-attr">b</span>: <span class="hljs-number">3</span> <br>&#125;; <br><span class="hljs-title function_">foo</span>( o1 ); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( o1.<span class="hljs-property">a</span> ); <span class="hljs-comment">// 2 </span><br><span class="hljs-title function_">foo</span>( o2 ); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( o2.<span class="hljs-property">a</span> ); <span class="hljs-comment">// undefined </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a ); <span class="hljs-comment">// 2——不好，a 被泄漏到全局作用域上了！</span><br></code></pre></td></tr></table></figure><p>可见，with 声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域。</p><p>当我们传递 o1 给 with 时，with 所声明的作用域是 o1，而这个作用域中含有一个同 o1.a 属性相符的标识符。</p><p>但当我们将 o2 作为作用域时，其中并没有 a 标识符，因此进行了正常的 LHS 标识符查找。查到全局都没有找到这个标识符，因此创建了一个全局变量。</p><p>在严格模式中，with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用eval(..) 也被禁止了。因此不推荐使用这两种机制。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到标识符。但如果引擎在代码中发现了 eval(..) 或 with，它只能简单地假设关于标识符位置的判断都是无效的，因为无法在词法分析阶段明确知道 eval(..) 会接收到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么。</p><p>最悲观的情况是如果出现了 eval(..) 或 with，所有的优化可能都是无意义的，因此最简单的做法就是完全不做任何优化。</p><p>如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢。无论引擎多聪明，试图将这些悲观情况的副作用限制在最小范围内，也无法避免如果没有这些优化，代码会运行得更慢这个事实。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>你不知道的JavaScript</tag>
      
      <tag>作用域和闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作用域是什么</title>
    <link href="/2023/02/21/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2023/02/21/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="作用域是什么"><a href="#作用域是什么" class="headerlink" title="作用域是什么"></a>作用域是什么</h1><h2 id="1-1编译原理"><a href="#1-1编译原理" class="headerlink" title="1.1编译原理"></a>1.1编译原理</h2><p>传统的编译语言流程中，源代码执行前会经历三个步骤，统称为编译。</p><h3 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1.词法分析"></a>1.词法分析</h3><p>将源代码根据解析规则分解为被称为词法单元的代码块，</p><h3 id="2-语法分析"><a href="#2-语法分析" class="headerlink" title="2.语法分析"></a>2.语法分析</h3><p>将词法单元流（数组）转换成一个由元素逐级嵌套组成的代表了程序语法结构的树，被称为抽象语法树（AST）。</p><h3 id="3-代码生成"><a href="#3-代码生成" class="headerlink" title="3.代码生成"></a>3.代码生成</h3><p>将AST转换为机器指令，这个过程与语言平台息息相关。</p><p>相比之下，JS引擎会更复杂，由于JS的编译往往发生在执行前几微秒。因此不会有太多时间进行优化，所以JS编译过程并不是发生在构建之前的。JS引擎用了很多办法保证性能最佳。</p><h2 id="1-2理解作用域"><a href="#1-2理解作用域" class="headerlink" title="1.2理解作用域"></a>1.2理解作用域</h2><p>对于变量的赋值操作，有两个步骤</p><ol><li>遇到变量声明，编译器会在作用域中查询，是否存在这一变量名，如果存在，编译器就会忽略这条声明，否则将在当前作用域集合中声明这个变量名。</li><li>接着编译器会生成引擎运行所需的代码，以处理赋值操作。引擎运行时会先查询作用域，当前作用域中是否有这个变量名，如果有，就使用这个变量名，否则继续查询。</li></ol><p>在第二步中，引擎执行编译器生成的代码时，查询变量是否已经声明，这个过程涉及到了作用域，但查询方式有两种。</p><h3 id="LHS"><a href="#LHS" class="headerlink" title="LHS"></a>LHS</h3><p>左值查询，寻找这个变量名，找到这个容器。</p><h3 id="RLS"><a href="#RLS" class="headerlink" title="RLS"></a>RLS</h3><p>右值查询或者说非左值查询，寻找这个变量值，找到这个内容。</p><p>对于函数的调用也会对函数名进行 RHS 查询，同时函数参数传递也是隐性的赋值操作，会进行 LHS 查询。</p><p>内置对象的引用也需要进行 RHS 查询。</p><p>例如以下案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123; <br> <span class="hljs-keyword">var</span> b = a; <br> <span class="hljs-keyword">return</span> a + b; <br>&#125; <br><span class="hljs-keyword">var</span> c = <span class="hljs-title function_">foo</span>( <span class="hljs-number">2</span> );<br></code></pre></td></tr></table></figure><p>这里有 3 处 LHS 查询。</p><ul><li>c &#x3D; ..</li><li>a &#x3D; 2（隐式变量分配）</li><li>b &#x3D; ..</li></ul><p>有 4 处 RHS 查询。</p><ul><li>foo( 2..</li><li>&#x3D; a</li><li>a ..</li><li>.. b</li></ul><h2 id="1-3作用域嵌套"><a href="#1-3作用域嵌套" class="headerlink" title="1.3作用域嵌套"></a>1.3作用域嵌套</h2><p>LHS 与 RLS 查询在当前作用域没有找到时，都会逐级向上查询，直到查询到顶层作用域（全局作用域），此时无论有没有找到，查询都会停止。</p><h2 id="1-4异常"><a href="#1-4异常" class="headerlink" title="1.4异常"></a>1.4异常</h2><p>一般情况下 RHS 查询无果，会抛出 ReferenceError 异常，LHS 查询无果，则会在全局作用域下创建这个变量名并返回。</p><p>在严格模式下，LHS 查询无果也会抛出 ReferenceError 异常。</p><p>接下来，如果在 RHS 查询时，对这个值进行不合理的操作，则会抛出 TypeErrow 异常。</p><p>ReferenceError 异常与作用域判别失败有关，TypeErrow 则代表作用域判别成功，但对结果操作不合法。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>你不知道的JavaScript</tag>
      
      <tag>作用域和闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day15</title>
    <link href="/2023/02/20/%E6%89%93%E5%8D%A1day15/"/>
    <url>/2023/02/20/%E6%89%93%E5%8D%A1day15/</url>
    
    <content type="html"><![CDATA[<p>今天是正式开学的时间，组件库基本要结束了，最近很久都没有写博客，一方面没有什么内容，另一方面是过年那时候一直不写，有很强的惰性。</p><p>直到项目结束其实也没有做出什么实质性的成果，没有做什么贡献，很惭愧。</p><p>从明天起好好努力。（好熟悉的台词）</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一个百日计划</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day14</title>
    <link href="/2023/02/03/%E6%89%93%E5%8D%A1day14/"/>
    <url>/2023/02/03/%E6%89%93%E5%8D%A1day14/</url>
    
    <content type="html"><![CDATA[<h1 id="学习与干活"><a href="#学习与干活" class="headerlink" title="学习与干活"></a>学习与干活</h1><p>今天补了一些之前没看完的青训营课和直播回放，过年那两天一直没怎么好好看过，错过了这个月，以后就看不到了呀。</p><p>看了一下组件库里准备做什么，准备做一个面包屑或者进度条什么的，在本地建了分支，还没有发布，这周应该会做好。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day13</title>
    <link href="/2023/02/02/%E6%89%93%E5%8D%A1day13/"/>
    <url>/2023/02/02/%E6%89%93%E5%8D%A1day13/</url>
    
    <content type="html"><![CDATA[<h1 id="要好好干活啦"><a href="#要好好干活啦" class="headerlink" title="要好好干活啦"></a>要好好干活啦</h1><p>今天小组开会说了一下组件库项目的进度问题，剩余时间大概只有三个礼拜左右了，八个人的队伍，仓库里到今天还只有四个人的提交。为了督促进度，定下了以后一周至少写两个组件的KPI，同时演示了一下如何新建一个组件，以及一些检查与运行的命令。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Next.js直播课笔记</title>
    <link href="/2023/02/02/Next-js%E7%9B%B4%E6%92%AD%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/02/Next-js%E7%9B%B4%E6%92%AD%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Next-js直播课笔记"><a href="#Next-js直播课笔记" class="headerlink" title="Next.js直播课笔记"></a>Next.js直播课笔记</h1><h2 id="网页应用"><a href="#网页应用" class="headerlink" title="网页应用"></a>网页应用</h2><h3 id="B端应用"><a href="#B端应用" class="headerlink" title="B端应用"></a>B端应用</h3><p>供内部用户使用。不会连接外网。</p><p>一般挂在内网，或者仅供内部用户使用。不会连接外网。</p><h3 id="C端应用"><a href="#C端应用" class="headerlink" title="C端应用"></a>C端应用</h3><p>连接外网，联网即可用。</p><h2 id="渲染方式"><a href="#渲染方式" class="headerlink" title="渲染方式"></a>渲染方式</h2><h3 id="CSR"><a href="#CSR" class="headerlink" title="CSR"></a>CSR</h3><p>客户端渲染。常见B端web应用开发，前后端分离，服务器压力轻，渲染工作在客户端进行。服务器仅仅返回不加工的HTML供后续访问。这个HTML中几乎不会有任何元素，仅仅包含所需的引用，在客户端进行渲染。</p><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>服务器端渲染。代码耦合度高，多种语言混杂在模板中，维护比较困难。</p><h4 id="同构SSR"><a href="#同构SSR" class="headerlink" title="同构SSR"></a>同构SSR</h4><p>BFF 服务于前端应用的后端。是一个服务，通常不会直接操作数据，一般是前后端的中介，可以提高大型项目的可维护性与可复用性。</p><p>前后端一体化，一套代码在服务器上运行一遍，到达浏览器端也会渲染一遍，前后端都会参与渲染，而且首次渲染出的HTML要一样。</p><h3 id="SSG"><a href="#SSG" class="headerlink" title="SSG"></a>SSG</h3><p>静态站点生成。构建时直接把结果页面HTML输出并保存，每次访问直接返回HTML，相当于一个静态资源，无法实现与用户相关数据交互，每个人看到的页面都一样。（这个博客就是这样产生的）。可以减轻服务器压力，只要直接访问CDN上的静态资源。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="SSR-SSG更利于SEO"><a href="#SSR-SSG更利于SEO" class="headerlink" title="SSR,SSG更利于SEO"></a>SSR,SSG更利于SEO</h4><p>SEO（搜索引擎优化），搜索引擎爬虫可以了解网页内信息，曝光需要的内容，影响搜索结果排序。CSR由于网页内容需要在客户端才能渲染，就无法被爬虫找到内容。</p><h4 id="SSR-SSG首屏时间更短，"><a href="#SSR-SSG首屏时间更短，" class="headerlink" title="SSR,SSG首屏时间更短，"></a>SSR,SSG首屏时间更短，</h4><p>因为只需要请求一个HTML文件而非大量JS文件，由于服务器间访问远快于客户端访问，所以通常CSR要慢一些。</p><h2 id="next-js"><a href="#next-js" class="headerlink" title="next.js"></a>next.js</h2><p>更好更快地开发SSR，SSG项目。是基于Node.js的开源Web开发框架，支持基于React的Web应用程序功能，例如服务端渲染与生成静态网页。</p><p>解决了许多原本服务端渲染的痛点。</p><h3 id="SSR的实现，"><a href="#SSR的实现，" class="headerlink" title="SSR的实现，"></a>SSR的实现，</h3><p>核心在于 ”同构“ ，也就是说客户端与服务端都会做一样的事情，保证二者渲染预期相同。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>仓库网址</p><p><a href="https://github.com/czm1290433700/ssr-server">https://github.com/czm1290433700/ssr-server</a></p><p>为什么客户端与服务端要保持一致，否则没有办法保证一些事件的触发。</p><h5 id="脱水与注水"><a href="#脱水与注水" class="headerlink" title="脱水与注水"></a>脱水与注水</h5><p>在服务器端返回模板页面中会将初始化数据抽离，而客户端渲染时会再次注入，以达到页面与服务器端保持一致。</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx create-next-app@latest --typescript<br></code></pre></td></tr></table></figure><p>next-env.d.ts确保ts编译器选择Next.js类型，可以放入gitignore中，不需要变更。</p><p>next.config.js文件，是nextjs的配置，可以补充webpack的一些配置。比如补充一些别名。</p><h4 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h4><h5 id="demo仓库"><a href="#demo仓库" class="headerlink" title="demo仓库"></a>demo仓库</h5><ul><li>CMS仓库地址：<a href="https://github.com/czm1290433700/nextjs-cms">https://github.com/czm1290433700/nextjs-cms</a></li><li>Demo仓库地址：<a href="https://github.com/czm1290433700/nextjs-demo">https://github.com/czm1290433700/nextjs-demo</a></li></ul><p>node.js16+运行</p><h5 id="数据注入"><a href="#数据注入" class="headerlink" title="数据注入"></a>数据注入</h5><p>getInintialProps</p><p>ssr,运行于服务端，但如果有内部跳转的操作走的仍然是客户端路由，而直接访问时仍然走服务端路由。</p><p>getServerSideProps</p><p>ssr,全都在服务端走。</p><p>getStaticProps</p><p>ssg，会遍历所有资源全部注入存入vpn</p><h5 id="CSS模块"><a href="#CSS模块" class="headerlink" title="CSS模块"></a>CSS模块</h5><p>Next.js支持使用文件命名约定的CSS模块。[name].module.css</p><h5 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h5><p>通过在入口文件导入layout，可以实现每一个页面公共的页眉页脚。</p><h5 id="文件式路由"><a href="#文件式路由" class="headerlink" title="文件式路由"></a>文件式路由</h5><p>Next.js有一个基于页面概念的基于文件系统的路由器。当一个文件被添加到pages目录中时，它会自动作为一个可用路径。</p><p>预定义路由优先级更高，它能匹配就不会分发给下面的动态路由。原生方法跳转性能不如它。</p><h5 id="大图优化"><a href="#大图优化" class="headerlink" title="大图优化"></a>大图优化</h5><p>webp格式体积小一些但渲染时间长一点点，同时要检查当前浏览器是否支持。</p><h5 id="CSS适配"><a href="#CSS适配" class="headerlink" title="CSS适配"></a>CSS适配</h5><p>在不同设备尺寸下，修改使用的css样式。</p><h5 id="JS适配"><a href="#JS适配" class="headerlink" title="JS适配"></a>JS适配</h5><p>在不同的设备下组件结构有很大的改变，使用JS进行操作。</p><h4 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h4><h5 id="BFF层开发"><a href="#BFF层开发" class="headerlink" title="BFF层开发"></a>BFF层开发</h5><p>类似于Express，区别在于并没有参数可以直接区别请求类型。</p><h5 id="Strapi-headless-CMS"><a href="#Strapi-headless-CMS" class="headerlink" title="Strapi - headless CMS"></a>Strapi - headless CMS</h5><p>仓库：<a href="https://github.com/strapi/strapi">https://github.com/strapi/strapi</a></p><p>初始化：npx create-strapi-app my-project –quickstart</p><p>一个接口的生成有以下几个过程：</p><ol><li>content-type builder 编辑结构体。</li><li>content manager 配置数据源，并且发布。</li><li>settings roles 里选择对应角色并勾选要发布的接口类型。</li><li>如果涉及嵌套，在接口后加上 populate&#x3D;deep 参数（npm install strapi-plugin-populate-deep –save），没安装加参数 populate&#x3D;*，但只能嵌套一层。</li></ol><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p>首页功能</p><ol><li>页面&amp;动画&amp;多媒体适配</li><li>BFF</li><li>Strapi</li></ol><p>文章页实现</p><ol><li>页面&amp;动画&amp;多媒体适配</li><li>BFF</li><li>Strapi分页（&#x2F;api&#x2F;articles?pagination[page]&#x3D;1&amp;pagination[pageSize]&#x3D;10 &#x2F;&#x2F; 按十个一页返回第一页数据）</li><li>多媒体格式的转换</li></ol><ul><li>Markdown 转 html：npm install showdown –save</li><li>html 转 dom：dangerouslySetlnnerHTML</li><li>公共样式的定义</li></ul><h5 id="主体化功能实现"><a href="#主体化功能实现" class="headerlink" title="主体化功能实现"></a>主体化功能实现</h5><ol><li>基础样式和背景的抽离</li><li>主题haulcontext全局注入</li><li>从注入数据中取出theme和setTheme</li><li>多进程间主题同步</li></ol><p>小知识：<a href="http://localhost:300与http://127.0.0.1:3000不可以共享主题，因为这是跨域操作。">http://localhost:300与http://127.0.0.1:3000不可以共享主题，因为这是跨域操作。</a></p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day12</title>
    <link href="/2023/02/01/%E6%89%93%E5%8D%A1day12/"/>
    <url>/2023/02/01/%E6%89%93%E5%8D%A1day12/</url>
    
    <content type="html"><![CDATA[<h1 id="新的一年开始啦"><a href="#新的一年开始啦" class="headerlink" title="新的一年开始啦"></a>新的一年开始啦</h1><p>今天是正月十一，过了十天的年假，要继续开始学习啦。</p><p>随着一月的结束，字节校园的每一日题打卡活动也结束啦，接下来的重点就在于在时间截止前完成项目。</p><p>今天简单的雨欣了项目主分支的文档页和测试页，花一些时间解决了几个报错（至少能跑起来了）。同组的伙伴以及实现了很多个组件，我也该开始干活啦。</p><p>其实我本来前两就不再串门走亲访友了，但确实懒得干活，出去逛了两天，很开心。但项目迫在眉睫，我也确实该收心了。</p><p>青训营送了一个月的掘金会员，我也要乘机用起来，看看掘金小册什么的，笔记活动也要继续更新起来了。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一个百日计划</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青训营答疑直播记录</title>
    <link href="/2023/01/31/%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AD%94%E7%96%91%E7%9B%B4%E6%92%AD%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/31/%E9%9D%92%E8%AE%AD%E8%90%A5%E7%AD%94%E7%96%91%E7%9B%B4%E6%92%AD%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="青训营答疑直播记录"><a href="#青训营答疑直播记录" class="headerlink" title="青训营答疑直播记录"></a>青训营答疑直播记录</h1><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="刷力扣"><a href="#刷力扣" class="headerlink" title="刷力扣"></a>刷力扣</h3><p>对面试有一定帮助，应当有目的的刷。</p><p>大概刷到什么程度？</p><p>面前端需要的数据结构算法等熟悉即可，本科教材中除了图之外的数据结构，排序，等等熟悉，不需要过度钻研太难的题。</p><h3 id="掘金课程"><a href="#掘金课程" class="headerlink" title="掘金课程"></a>掘金课程</h3><p>建议多看一看，多了解自己比较适合什么。</p><h3 id="八股文"><a href="#八股文" class="headerlink" title="八股文"></a>八股文</h3><p>最基础的部分必须要会，有必要背，比较偏门底层的东西可以凭自己的兴趣了解，对面试会很有帮助。</p><h3 id="框架与原生"><a href="#框架与原生" class="headerlink" title="框架与原生"></a>框架与原生</h3><p>都很主要，面对业务开发必须了解框架，更深入定制话的需求则需要了解框架构成，或者自己造轮子，都会用到原生JS。</p><p>框架原理可以在有一定的使用经验时去了解。</p><h3 id="冷门html标签"><a href="#冷门html标签" class="headerlink" title="冷门html标签"></a>冷门html标签</h3><p>大多简单了解即可，不必专门深入。</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>很重要，不仅仅给人看，还在给搜索引擎，爬虫看，对搜索的优化比较重要。</p><h3 id="HTML5规范"><a href="#HTML5规范" class="headerlink" title="HTML5规范"></a>HTML5规范</h3><p>不需要专门去记，因为它的规范比较简单，同时浏览器兼容了许多不规范的写法，所以不必专门记。</p><h3 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h3><p>改变外部环境的函数就是有副作用的函数。尽量不要出现这种写法。</p><h3 id="看源码"><a href="#看源码" class="headerlink" title="看源码"></a>看源码</h3><p>很多框架，库之类的源码会有一定的复杂度，最好一步一步从某个功能开始看，循序渐进。同时需要一定前置知识。</p><h3 id="webpack掌握"><a href="#webpack掌握" class="headerlink" title="webpack掌握"></a>webpack掌握</h3><p>没有一个确定的标准，是一个比较偏向八股文的东西，但不太需要详细了解核心原理，手写复刻什么的。</p><h3 id="推荐学习"><a href="#推荐学习" class="headerlink" title="推荐学习"></a>推荐学习</h3><p>js，算法，操作系统，计算机底层原理，编译原理。</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>写起来很爽，读起来很痛。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>不应当简单地看教程</p><p>应当在看源码，或者自己实现时应用或者理解。</p><h3 id="css动画"><a href="#css动画" class="headerlink" title="css动画"></a>css动画</h3><p>基本掌握即可，不必掌握太多。</p><h3 id="额外学习"><a href="#额外学习" class="headerlink" title="额外学习"></a>额外学习</h3><p>有必要学习JS，TS以外的语言</p><p>例如Java，go，rust等等。</p><h2 id="专题分享"><a href="#专题分享" class="headerlink" title="专题分享"></a>专题分享</h2><p>作为IT从业人员，经常会看到数据结构与算法的字眼，甚至有专门刷题的教程等等。但这次分享更关注于通过案例说明数据结构与算法的意义。</p><p>通常在项目开发中，我们经常可以发现，自己的代码在整个项目中占比很小，更多的部分实际上是第三方库的代码，这可以让原本复杂的逻辑得到简化、</p><p>而那些复杂的逻辑，就必然会涉及到数据结构与算法的知识，同时也有很多已经有很多封装好的第三方库，只需要进行简单的调用。</p><p>虽然如此，这并不意味着不再需要数据结构与算法的学习，因为总会有找不到合适的解决方案的，此时就需要自己造轮子等等。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="遍历文件"><a href="#遍历文件" class="headerlink" title="遍历文件"></a>遍历文件</h4><p>递归是很多算法实现的基础，也是新手进阶的门槛。实现了深度优先算法。常见的应用有</p><ul><li>页面侧边栏</li><li>文件树</li></ul><p>等等。</p><h4 id="AST解析器"><a href="#AST解析器" class="headerlink" title="AST解析器"></a>AST解析器</h4><p>词法分析与语法分析</p><p>先将代码拆分为词法单元，本质上是对字符串的扫描并根据词法规则分组。</p><p>语法解析，遍历词法单元，构造出一个完整的对象树结构。本质</p><p>上是在构造一个栈，不断入栈并检查栈内元素。</p><p>参考链接：</p><ul><li><a href="https://github.com/sanyuan0704/juejin-book-vite/tree/main/ast-parser">简易Babel Parser实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/338772106">一百来行 JS 写个玩具 HTML Parser - 知乎 </a></li></ul><h4 id="模块打包器"><a href="#模块打包器" class="headerlink" title="模块打包器"></a>模块打包器</h4><p>Bundler是前端工程化的核心，本身复杂度就很高，在这里简单介绍一下背后的原理。</p><ul><li>依赖图建立</li><li>循环依赖分析</li></ul><p>首先通过AST解析器从入口开始分析模块的依赖，然后构造出完整的模块依赖。构建出一个图，检查其中是否存在循环依赖，涉及到拓扑排序，也会用在Monorepo工具命令的调度。</p><p>扩展：</p><ul><li><a href="https://github.com/sanyuan0704/juejin-book-vite/tree/main/bundler">简易bundler实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/491391823">tree shaking原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/491391823">tree shaking问题排查指南 - 知乎 (zhihu.com)</a></li></ul><h4 id="缓存淘汰"><a href="#缓存淘汰" class="headerlink" title="缓存淘汰"></a>缓存淘汰</h4><ul><li>SSR缓存</li><li>vue的keepAlive组件</li><li>webpack中对loader的结构进行缓存</li></ul><p>缓存过多会导致服务稳定性问题，一般会设置一个阈值，常用的LRU算法（最近最少使用原则），把最近使用频率最低的节点删除。</p><p>扩展资料：</p><ul><li><a href="https://www.npmjs.com/package/lru-cache">lru-cache - npm (npmjs.com)</a></li></ul><h4 id="相似命令提示"><a href="#相似命令提示" class="headerlink" title="相似命令提示"></a>相似命令提示</h4><p>命令行输错命令时，给出提示，告诉他最接近是命令是什么</p><p>这个功能基于最小编辑距离算法实现</p><p>扩展</p><ul><li><a href="https://github.com/sindresorhus/leven/blob/main/index.js">leven&#x2F;index.js at main · sindresorhus&#x2F;leven (github.com)</a></li><li><a href="https://github.com/yefim/autocorrect/blob/master/index.js">autocorrect&#x2F;index.js at master · yefim&#x2F;autocorrect (github.com)</a></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上的场景都用到了算法解决实际的问题，前端也需要一定的数据结构算法只是，同时也有工具链，可视化，跨端等等细分领域。</p><p>课件，数据结构与算法是一门长期学习的学科，需要长期的积累与思考。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day11</title>
    <link href="/2023/01/20/%E6%89%93%E5%8D%A1day11/"/>
    <url>/2023/01/20/%E6%89%93%E5%8D%A1day11/</url>
    
    <content type="html"><![CDATA[<h1 id="今天闲了一天"><a href="#今天闲了一天" class="headerlink" title="今天闲了一天"></a>今天闲了一天</h1><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>今天发现昨日的每日一题忘记了打卡，没有好好看课，忙于别的事情。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>在被逼无奈，并不情愿的情况下，我不得不去理发，理发店人很多，我几乎排了一下午的队，老板有点奇怪我为什么前两天跟朋友去的时候不一起理呢，我没有说这其实是家人的要求。回到家收拾了一下房间，简单洗了洗澡。在家里我并没有什么食欲，或者说家里的饭经常不那么好吃，不同于在校时的多种选择，在家似乎只有馒头和面的主旋律，以及白菜萝卜西红柿的和弦，我煮点泡面或是粉丝也总被调侃 “不吃正经饭” ，这同样很无奈。</p><p>我并不喜欢家人随意地进入我的房间，因为进来总是不会有什么好消息，过去的的阴影总是在无形中警示着我，虽然现在已经不会再进门数落我或是要求我停下现在做的事情去干活了，但房门被打开还是会让我神经紧张。</p><p>在学校时，同学和朋友们似乎真的很想回家，但我并不总是有这样的愿望，比起学校，似乎家更可能让我孤独。家人的爱与我的想法常常背道而驰，我却也不能苛责这样的爱。这总让我痛苦和感叹。</p><p>事实上昨天，前天，大前天的博客并没有在当天写完，直到今日，我才一口气补完了这几篇。博客似乎更多的在于记录我的生活与学习思考，给时间标记一个刻度，告诉自己，已经过去一天了，你做了些什么。我希望从这种小事起，做一些有意义的习惯，借此养成自己有计划的生活。</p><p>前两天我有些累，又被要求早点睡觉，于是匆匆写了一些，没有上传，今天我才发现已经有三天没有写了，我确实体会到了所谓的惰性，一旦有了放弃的想法，似乎继续摆烂好像也无妨？这种想法让我感到害怕，或许我在有些日子可能确实没有办法写博客，但我或多或少总会记录下来，在未来补齐。我希望这能成为我坚持下来的事情。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一个百日计划</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day10</title>
    <link href="/2023/01/19/%E6%89%93%E5%8D%A1day10/"/>
    <url>/2023/01/19/%E6%89%93%E5%8D%A1day10/</url>
    
    <content type="html"><![CDATA[<h1 id="今天做的事情不多"><a href="#今天做的事情不多" class="headerlink" title="今天做的事情不多"></a>今天做的事情不多</h1><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>今天晚上组内开会，讲了一下脚手架怎么用，分享了文档，在github组了团队。</p><p>晚上有一场直播抽奖活动，抽奖代码现场编写，很酷，虽然最后也没有中奖。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今天的活已经少了很多，自己炒的菜并不好吃，打卡已经持续了十天，但我觉得自己并没有太大的进步，总会有大大小小的事情打断自己的计划，或许在家本就会是这样？</p><p>这十天是计划的第一步，却迈得可谓是相当潦草，我混乱颠倒的生物钟本就与家格格不入，而很多琐碎的事也要我去做，这样的结果就是一天下来没有什么时间在做正事，在家不如在学校来的自由，这是没办法的事情，或许过年之后情况会好一些吧。</p><p>在前两天的摸鱼时我会感到惭愧并反思，但这两日的碌碌无为确实不可调和的矛盾造成的，有点无奈。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day9</title>
    <link href="/2023/01/18/%E6%89%93%E5%8D%A1day9/"/>
    <url>/2023/01/18/%E6%89%93%E5%8D%A1day9/</url>
    
    <content type="html"><![CDATA[<h1 id="今天没有怎么学习"><a href="#今天没有怎么学习" class="headerlink" title="今天没有怎么学习"></a>今天没有怎么学习</h1><h2 id="面试小寄巧"><a href="#面试小寄巧" class="headerlink" title="面试小寄巧"></a>面试小寄巧</h2><p>今天有个朋友明天要面试了，有个学长给他模拟了一下面试，在这里做一点总结</p><h3 id="项目提问"><a href="#项目提问" class="headerlink" title="项目提问"></a>项目提问</h3><p>在项目提问时，要准备一些项目亮点，作为引导面试官提问的准备，同时这些亮点应当掌握非常熟练，因为接下来很可能接着去问很多相关的知识点。介绍项目是不应当介绍项目的作用，或者项目的整体的业务逻辑，而应当着重介绍自己做的部分，同时不需要说学了哪些东西，而是说自己用到了什么，同时引出亮点。</p><h3 id="基础提问"><a href="#基础提问" class="headerlink" title="基础提问"></a>基础提问</h3><p>项目提问结束，一般会开始问一些基础知识，css3，html5新特性，js相关，以及相关的计网等等，大多是面试套路，要多背，多理解。面试官经常不会正面提问，而是根据实例去问。面经有很多。可以不完全答出来，但可以的话应该尽可能深入地回答。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>今天继续在家里干活，昨天短暂逃过的终究会堆积到明天，擦玻璃，洗衣服 晾衣服 扫地 拖地等等，年前的最后几天就是这样忙碌，可以预见的，这种忙碌或许还会持续。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一个百日计划</tag>
      
      <tag>生活</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day8</title>
    <link href="/2023/01/17/%E6%89%93%E5%8D%A1day8/"/>
    <url>/2023/01/17/%E6%89%93%E5%8D%A1day8/</url>
    
    <content type="html"><![CDATA[<h1 id="今天没有认真学习"><a href="#今天没有认真学习" class="headerlink" title="今天没有认真学习"></a>今天没有认真学习</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>pnpm升级时</p><p>ERR_PNPM_NO_GLOBAL_BIN_DIR Unable to find the global bin directory</p><p>配置文件路径问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">//pnpm全局仓库路径<br>pnpm config <span class="hljs-built_in">set</span> store-<span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;F:.pnpm-store&quot;</span><br>//pnpm全局安装路径<br>pnpm config <span class="hljs-built_in">set</span> <span class="hljs-keyword">global</span>-<span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;F:\pnpm\pnpm-global&quot;</span><br>// pnpm 全局<span class="hljs-built_in">bin</span>路径 ，这个路径还要配置到环境变量里面去<br>pnpm config <span class="hljs-built_in">set</span> <span class="hljs-keyword">global</span>-<span class="hljs-built_in">bin</span>-<span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;F:\pnpm&quot;</span><br>//pnpm创建pnpm-satate.json文件的目录<br>pnpm config <span class="hljs-built_in">set</span> state-di<span class="hljs-string">r&quot;F:\pnpm\state&quot;</span><br>//pnpm全局缓存路径<br>pnpm config <span class="hljs-built_in">set</span> cache-<span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;F:\pnpm\cache&quot;</span><br></code></pre></td></tr></table></figure><p>配置后出现警告</p><p>The location of the currently running pnpm differs from the location where pnpm will be installed</p><p>修改方式，将环境变量中的pnpm指向当前pnpm的运行位置。</p><p>环境变量修改后需要重启终端后生效。</p><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>看了看掘金小册，基于vite搭建组件库。初步尝试了一下构建，但没有多看，因为时间的问题，也没有做笔记。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>有个朋友来家里做客，他今天刚刚考过科三，很开心，就来找我啦。正好我也借此暂时逃过了继续干活的命运。一下午一边聊天一边简单看看掘金小测，时间很快过去。没有什么值得记录的东西。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>报错</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day7</title>
    <link href="/2023/01/16/%E6%89%93%E5%8D%A1day7/"/>
    <url>/2023/01/16/%E6%89%93%E5%8D%A1day7/</url>
    
    <content type="html"><![CDATA[<h1 id="今天忙了一天"><a href="#今天忙了一天" class="headerlink" title="今天忙了一天"></a>今天忙了一天</h1><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>快过年了，家里要开始收拾了，我也不可能做个“闲人”，作为家里最高的一份子，我义无反顾的成为了所有窗帘的拆卸者，安装者，窗户的清洁者。家里的窗户平日立在那里不显得多，也不显得高，但这一日我却觉得它们并非如此，虽说假期的时间本就自由，但我也确实想有一些时间来做自己的事。</p><p>傍晚吃过饭后，我赶着一日最后的几个小时，草草看过课程，水了一篇笔记，写了一下博客，感叹一下今日的匆匆。</p><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>月影老师的课确实给了我不一样的感觉，第一节各司其职就用一个不断优化的例子，很形象地说明了结构样式行为分离的意义与实现，零JS实现有点意外，理解之后又觉得自己学的并不够。</p><p>第二节讲到了组件封装，这与我们的最终项目相契合，我也有好好听，同样的这一节也是通过一个简单轮播图的实现与优化，向我展示了一个普通的，我一年前就能写出来的组件，如何一步步优化成为一个封装良好，实现插件化，模板化，抽象化的类似于常用的组件库的一个组件，其中依赖注入，模板化 HTML 以及抽象化编程给了我一定的启发。</p><p>最后一节主要在讲过程抽象了解了高阶函数这类以函数为输入输出的函数，以及函数式编程带来的可扩展性。</p><p>明天可以去看昨天没有看完的CSS课程，或者看vite开发组件的视频课，为大项目准备，同组的人都非常迷茫，想要最后有一个结果，或许只能靠自己努力了。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS编码原则</title>
    <link href="/2023/01/16/JS%E7%BC%96%E7%A0%81%E5%8E%9F%E5%88%99/"/>
    <url>/2023/01/16/JS%E7%BC%96%E7%A0%81%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="JS编码原则"><a href="#JS编码原则" class="headerlink" title="JS编码原则"></a>JS编码原则</h1><h2 id="各司其职"><a href="#各司其职" class="headerlink" title="各司其职"></a>各司其职</h2><p>HTML 负责结构，CSS 负责表现，JS 负责行为。</p><p>结构，表现，行为分离，是前端工程师的基本原则。</p><p>尽量不要通过 JS 去修改 CSS 属性，最好的方式是样式修改的操作通过 CSS 本身实现。</p><p>月影老师举了一个简单的例子，一个昼夜模式切换的按钮的实现：</p><p>首先最简单的就是按钮绑定点击事件，修改背景颜色与文字颜色属性与按钮图标，但这与我们的设计原则有了冲突，几应当尽量实现样式与行为分离。</p><p>这时我们尝试进行优化，我们添加一个 night 类表示夜间模式的样式，点击事件仅修改body元素的样式类，这样的方式，将类作为一种状态，通过 JS 修改页面状态，是一个不错的思路。</p><p>而更好更彻底的做法呢，则是利 CSS 本身的伪类  checked 与兄弟选择器去修改CSS属性，将样式与行为彻底分离，实现了零JS实现。这种思维方式值得学习。</p><h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2><p>组件时指从 web 页面上抽离出的一个个包含模板，样式，行为的单元。</p><p>好的组件应当具有封装性，正确性，扩展性，复用性。</p><h3 id="基本设计方法"><a href="#基本设计方法" class="headerlink" title="基本设计方法"></a>基本设计方法</h3><ul><li><p>结构设计</p></li><li><p>展示效果</p></li><li><p>行为设计</p><ul><li><p>API（功能）</p></li><li><p>event（控制流）</p><ul><li>自定义事件</li><li>解耦</li></ul></li></ul></li></ul><h3 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h3><ul><li>将控制元素抽离为插件</li><li>插件与组件之间通过<strong>依赖注入</strong>的方式建立联系</li></ul><h3 id="模板化"><a href="#模板化" class="headerlink" title="模板化"></a>模板化</h3><ul><li>将HTML模板化，更易于扩展</li></ul><h3 id="抽象化"><a href="#抽象化" class="headerlink" title="抽象化"></a>抽象化</h3><ul><li>将组件通用模型抽象出来</li></ul><h2 id="过程抽象"><a href="#过程抽象" class="headerlink" title="过程抽象"></a>过程抽象</h2><ul><li>用来处理局部细节的一些方法</li><li>函数式编程思想的初步应用</li></ul><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>以函数为参数</li><li>以函数为返回值</li><li>常用作函数装饰器</li></ul><p>常见的有防抖函数，节流函数。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day6</title>
    <link href="/2023/01/15/%E6%89%93%E5%8D%A1day6/"/>
    <url>/2023/01/15/%E6%89%93%E5%8D%A1day6/</url>
    
    <content type="html"><![CDATA[<h1 id="青训营的第一天"><a href="#青训营的第一天" class="headerlink" title="青训营的第一天"></a>青训营的第一天</h1><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>今天的课程只是了解CSS与HTML，学到的新东西不多，但还是做了一点点笔记，希望可以养成习惯吧。</p><p>还有一个重要原因就是参与活动有小奖品，而且青训营的结营证书似乎也需要参加这个活动才行。</p><h2 id="思考生活"><a href="#思考生活" class="headerlink" title="思考生活"></a>思考生活</h2><p>最近几天的学习效率一直不高，经常学着什么就打岔去看别的东西了，这种状态不佳，同时临近过年，家里也多多少少要帮忙干点活的，时间可能确实不多。</p><p>同时放假在家也只是一个人，没有一起的人总是很容易自己放纵自己，“等一等再做吧？反正也没什么”这种想法很容易产生，很容易看看视频，玩一会游戏而度过大半个下午，剩下的零碎时间又被各种小时分散，真正学习的时间很可能就只有大半夜，但这终究是恶性循环，颠倒时差。</p><p>组队群里最近并没有什么讨论，大项目依然一筹莫展，这就是注定会落下的达摩克利斯之剑，而开学后还有新学期的课程，蓝桥杯，以及书院学员的项目审评等等工作要做。有点头疼。</p><p>最近打字愈发熟练了，但还是经常卡壳。前两天朋友送了个小加湿器和玩偶作为我的生日礼物，放在我的床头和案边，时常激励我。</p><p>近两天才发现掘金活动的奖品并不累计，所以可能我应该不会再进行阅读打卡了。</p><p>踏实的学习才能让人安心，我现在越发地体会到自己学识的浅薄，很多事情我知道自己可以做，但很不熟练，还有一些已经记不清了。</p><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><p>今天有个朋友问了我一个报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unable to access ‘https://github.com/***.git‘: OpenSSL SSL_read: Connection was reset, errno 10054<br></code></pre></td></tr></table></figure><p>最后解决了，原因不过是网络不佳。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端入门 - 基础语言篇</title>
    <link href="/2023/01/15/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8-%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80%E7%AF%87/"/>
    <url>/2023/01/15/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8-%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前端与HTML"><a href="#前端与HTML" class="headerlink" title="前端与HTML"></a>前端与HTML</h1><h2 id="什么是前端工程师"><a href="#什么是前端工程师" class="headerlink" title="什么是前端工程师"></a>什么是前端工程师</h2><p>使用web技术栈解决多端图形用户界面交互的人。</p><h3 id="基本技术栈"><a href="#基本技术栈" class="headerlink" title="基本技术栈"></a>基本技术栈</h3><p>HTML（内容），CSS（样式），JavaScript（行为）</p><h3 id="关注什么"><a href="#关注什么" class="headerlink" title="关注什么"></a>关注什么</h3><ul><li>功能，满足基本的需求。</li><li>美观，没有人不爱美的事物。</li><li>无障碍，考虑到所有人的体验。</li><li>安全，保护信息，隐私等。</li><li>性能，加载速度快，运行流畅。</li><li>兼容，不同浏览器，不同设备都有良好的体验。</li></ul><h3 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h3><p>开发服务端引用，开发前端应用，游戏等等，需要我们持续地学习。</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>只需要基本的浏览器和编辑器，入门简单。</p><h2 id="HTML介绍"><a href="#HTML介绍" class="headerlink" title="HTML介绍"></a>HTML介绍</h2><p>HyperText Markup Language（超文本标记语言），在此不多赘述。</p><p>代码第一行为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标记了当前使用的HTML文件的HTML版本，如果不写，浏览器将会以一种老旧的“怪异模式”去渲染页面，影响页面展示效果。</p><p>浏览器解析HTML时，会先将文件解析为DOM树，包含文档中的所有节点与对于父子关系。</p><h3 id="语法建议"><a href="#语法建议" class="headerlink" title="语法建议"></a>语法建议</h3><ul><li>虽然标签与属性并不区分大小写，但推荐书写原生标签时使用小写，而在使用自定义组件时使用大写，便于项目维护与多人开发。</li><li>属性值推荐使用双引号包裹</li><li>某些值仅为 true 或 false 的属性，在为true时可以不写属性值。</li></ul><h3 id="一些不熟的标签"><a href="#一些不熟的标签" class="headerlink" title="一些不熟的标签"></a>一些不熟的标签</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>除常见的有序列表（ol）与无序列表（ul）外还有一种列表定义列表（dl）可以表示一些属性名（dt）与属性值（dd）可以一对多或者多对一。</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><ul><li>&lt;blockquote&gt;标签，块级引用（长引用），cite属性可以表示文字来源。</li><li>&lt;cite&gt;标签，短引用，多用于表示作品名，章节等的引用。</li><li>&lt;q&gt;标签，引用前文，多用于表示引用的具体文字。</li><li>&lt;code&gt;标签，引用短代码。</li><li>&lt;pre&gt;标签内加&lt;code&gt;标签，引用多行代码。</li></ul><h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h4><p>常用的有header标签，nav标签，aside标签，main标签，article标签，footer标签等等。</p><p>开发当中应当尽可能遵循语义书写，优点如下</p><ul><li>便于其他开发者维护，修改。</li><li>便于搜索引擎提取关键字与排序等。</li><li>便于用户使用。</li><li>便于盲人的屏幕阅读器识别等等。</li></ul><p>HTML的意义在于传递内容，而非样式，不可以为了某个特定样式而使用不合适的语义标签。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day5</title>
    <link href="/2023/01/14/%E6%89%93%E5%8D%A1day5/"/>
    <url>/2023/01/14/%E6%89%93%E5%8D%A1day5/</url>
    
    <content type="html"><![CDATA[<h1 id="今天可能比较闲？"><a href="#今天可能比较闲？" class="headerlink" title="今天可能比较闲？"></a>今天可能比较闲？</h1><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><h3 id="主要课程"><a href="#主要课程" class="headerlink" title="主要课程"></a>主要课程</h3><h4 id="打卡签到"><a href="#打卡签到" class="headerlink" title="打卡签到"></a>打卡签到</h4><ul><li>直播课程：<strong>每节课程</strong>快结束时在直播间发放<strong>课程反馈问卷</strong>，问卷填写完毕即视为成功签到当堂课程</li><li>直播课仅有两天时间内课回放</li><li>掘金课程：问卷签到。问卷开放时长于课程当日10:00 - 23:59:59 </li><li>结束前都可以看</li></ul><h4 id="请假"><a href="#请假" class="headerlink" title="请假"></a>请假</h4><p>直播课程支持请假，直播<strong>课程开始前</strong>在<strong>课程群</strong>发放上课通知和请假问卷，问卷填写完毕即视为当堂课程请假成功，问卷时间截止到次日10:00</p><p><a href="https://bytedance.feishu.cn/docx/TKNwd1Ag5o5UI4xrqLLcXaW9nag">‌‌‌‌⁣‌‍⁣⁣⁣⁡‬⁤⁡﻿⁣⁢‌⁣‍⁢‬⁤‍‬⁢⁣⁢⁡﻿⁢⁢‬‬‬‬﻿‬‍‌﻿【开营直播】第五届字节跳动青训营前端专场 - 飞书云文档 (feishu.cn)</a></p><h3 id="其他活动"><a href="#其他活动" class="headerlink" title="其他活动"></a>其他活动</h3><h4 id="阅读打卡"><a href="#阅读打卡" class="headerlink" title="阅读打卡"></a>阅读打卡</h4><p>参加了字节阅读打卡活动，今天是第39天（共50天），每天发一篇沸点，关键有五点：</p><ol><li>选择圈子</li><li>选择标签</li><li>添加链接</li><li>第一行写好日期与打卡day几</li><li>笔记内容30字以上</li></ol><h4 id="笔记创作"><a href="#笔记创作" class="headerlink" title="笔记创作"></a>笔记创作</h4><p>准备参加伴学笔记创作活动，每天开始，关键有五点：</p><ol><li>标题为：正式标题（内容相关即可） ｜ 青训营笔记</li><li>文章第一句为：这是我参与「第五届青训营 」笔记创作活动的第N天（N为同学参与活动的天数，已参加几天，N就为几）</li><li>字数不小于五百字，代码文字比不得超过70%。</li><li>原创不得洗稿抄袭。</li><li>发布文章时：分类选择-<a href="https://juejin.cn/article">阅读</a>，标签选择-<a href="https://juejin.cn/tag/%E9%9D%92%E8%AE%AD%E8%90%A5">青训营</a></li></ol><p>参考链接：</p><ul><li><a href="https://juejin.cn/post/7187618314502275129/">📚 伴学笔记创作活动来袭 ｜ 第五届字节跳动青训营 - 掘金 (juejin.cn)</a></li><li><a href="https://bytedance.feishu.cn/docx/doxcn8Jw0d0VZTtFsOBucFGDqVh">⁡⁤‍﻿⁡⁡⁡⁢⁣‌‬⁤‍⁤‌‬⁣‬‬⁡⁡⁣⁢‍‌‬‍⁢‍⁡⁣﻿⁤﻿⁢⁤⁢‌⁣笔记创作评判标准 &amp; 模版 - 飞书云文档 (feishu.cn)</a></li></ul><h4 id="码上掘金"><a href="#码上掘金" class="headerlink" title="码上掘金"></a>码上掘金</h4><p>可能不参加，看情况。</p><p><a href="https://juejin.cn/post/7187753682421678137">「青训营 X 码上掘金」主题创作活动入营版 开启！ - 掘金 (juejin.cn)</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>今天了解了一下如何建立一个组件库，感觉到任务之艰巨。没有再做其他有用的事情。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>摸鱼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文档规范</title>
    <link href="/2023/01/14/%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83/"/>
    <url>/2023/01/14/%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="统一规范的必要性"><a href="#统一规范的必要性" class="headerlink" title="统一规范的必要性"></a>统一规范的必要性</h2><blockquote><p>统一中文文案、排版的相关用法，可以降低团队成员之间的沟通成本，增强网站气质。</p><p>——来自<a href="https://mazhuang.org/">mazhuang.org</a></p></blockquote><p>优秀的文档应当有统一的规范，从目录结构，书写方式，列表的用法等等方面应当做到便于理解与统一。</p><p>或许这些规范都是一些小细节，但希望大家在写新文档时可以参考一下。有不同意见可以经过讨论后修改本文档。</p><p>同时本文的建议不仅适用于作业文档，大家在写教程或者笔记时也可以参考。</p><h2 id="大纲结构"><a href="#大纲结构" class="headerlink" title="大纲结构"></a>大纲结构</h2><p>常用的 typora 可以选择打开 视图 -&gt; 大纲 以清晰的了解文档结构并进行导航，而为了优化体验有如下建议：</p><h3 id="1-设置下级标题"><a href="#1-设置下级标题" class="headerlink" title="1.设置下级标题"></a>1.设置下级标题</h3><p>各级标题的作用可以认为是讲文档内容切割细分，以方便各取所需或者更快地找到想要的部分，为了实现这一点我们应当适当地设置各级标题。例如在往期作业文档中，对视频资料，文本资料也设置一个标题，可以方便快速找到学员需要的部分。</p><p>尽量不要出现一段文字没有所属标题，比如未添加前言标题，而直接在文档开头直接插入前言，对文档整体的阅读体验与结构梳理并不好。</p><p>文档一般设置四到五级标题最好，否则过于深层的嵌套目录同样会树立阅读障碍。</p><h3 id="2-各级标题字数"><a href="#2-各级标题字数" class="headerlink" title="2.各级标题字数"></a>2.各级标题字数</h3><p>除一级标题外，各级标题不宜过长，否则大纲目录显示时效果不佳，也导致导航体验不好，同时精炼标题语言，而更细化的要求，比如要求掌握，了解，还是回顾，重点学习哪些内容，哪些不重要等等，可以写在该标题下，例如：</p><p>在文档 全栈方向第七次学习任务&amp;作业.md 中 <strong>掌握 JavaScript 对象相关的知识，并学习 JavaScript 的内置对象</strong>，作为原有的三级标题，显示在大纲中过于臃肿，不方便扫一眼就能识别。可以修改为这部分内容标题为 <strong>JS对象与内置对象</strong> 更加一目了然，同时由于上一级标题已经写明 学习任务 那么在这一级标题可以将 学习 等字样精简。</p><p>理想的副标题（此处指除一级标题外的标题）应当尽量不超过十个字左右（非强制要求，言简意赅即可），这样做的目的就是使文档大纲结构清晰。</p><h3 id="3-标题序号"><a href="#3-标题序号" class="headerlink" title="3.标题序号"></a>3.标题序号</h3><p>为了体现文档的整体结构与逻辑，可以适当的在需要的地方的标题前添加序号（例如此处的三级标题）。可以在大纲目录中形成类似有序列表的效果。</p><h2 id="段落结构"><a href="#段落结构" class="headerlink" title="段落结构"></a>段落结构</h2><h3 id="1-段落字数"><a href="#1-段落字数" class="headerlink" title="1.段落字数"></a>1.段落字数</h3><p>段落字数不宜过长，超过<strong>300字</strong>的一整段会在视觉与心理上给人造成压力，尽量根据内容将过于冗长的段落切割成多段，通常阅读时人只会对一整段话留下一个印象，过长的段落会使得印象模糊，信息丢失，多段落书写的节奏感可以给人更多的印象与记忆点。</p><h3 id="2-重点突出"><a href="#2-重点突出" class="headerlink" title="2.重点突出"></a>2.重点突出</h3><p>对于<strong>段落主旨</strong>或<strong>关键字</strong>我们可以适当加粗，加粗的简单突出效果可以避免阅读者遗漏重点，而反复阅读浪费时间，同时对于分条列出的列表应当尽量将<strong>重要事项靠前</strong>。比如作业提交注意事项中，第一次尝试仓库pr提交代码时，可以讲提交教程靠前，提前阅读，减少操作出错。而在之后的提交中，应当重点突出的则是截止时间，因此可以在列表第一条说明时间。以上举例都旨在说明，应当在阅读者注意力分散之前，让人尽早注意到重点。减少信息丢失与无效输出。</p><h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><h3 id="中英文混写"><a href="#中英文混写" class="headerlink" title="中英文混写"></a>中英文混写</h3><blockquote><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。与大家共勉之。」</p><p>——<a href="https://github.com/vinta/pangu.js">vinta&#x2F;paranoid-auto-spacing</a></p></blockquote><p>在日常书写文档时常出现中英文混写的情况，推荐在中文与英文之间用一个空格位隔开，这里介绍一种比较朴素的替换方式：在vscode中利用正则表达式进行替换。</p><h4 id="正则表达式替换"><a href="#正则表达式替换" class="headerlink" title="正则表达式替换"></a>正则表达式替换</h4><p>在vscode侧边栏图标中第二个搜索标识中，第一个搜索框为需要匹配的字符串。</p><p>如图打开第一个搜索框最后一个选项即可开始<strong>正则匹配</strong>，</p><p><img src="https://good-money.oss-cn-beijing.aliyuncs.com/blog-imgs/202301131826244.png" alt="image-20230113182645150"></p><p>图中匹配的正则表达式为：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">([<span class="hljs-character">\u4e00</span>-<span class="hljs-character">\u9fa5</span>]+)([A-Za-z]+)([<span class="hljs-character">\u4e00</span>-<span class="hljs-character">\u9fa5</span>]+)<br></code></pre></td></tr></table></figure><p>该表达式将匹配到连续中文，英文单词与中文的情况，例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">我超爱JavaScript啦<br></code></pre></td></tr></table></figure><p>这一句中会匹配到：爱JavaScript啦</p><p><img src="https://good-money.oss-cn-beijing.aliyuncs.com/blog-imgs/202301131826244.png" alt="image-20230113182645150"></p><p>第二个搜索框中为替换的字符串，其中的$1匹配了([\u4e00-\u9fa5]+)，$2匹配了([A-Za-z]+)，以此类推，</p><p>点击第二个搜索框后的按钮 <img src="https://good-money.oss-cn-beijing.aliyuncs.com/blog-imgs/202301131927786.png" alt="image-20230113192707744"> 即可进行替换啦。</p><p>搜索框中的 “$1 $2 $3” 会将匹配到的 “$1$2$3”替换掉。</p><p>相当于我们将原本相邻的 <strong>爱JavaScript啦</strong> 替换为 <strong>爱 JavaScript 啦</strong> 。</p><p>同理我们也可以用</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$1 $2<br></code></pre></td></tr></table></figure><p>替换</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">([<span class="hljs-character">\u4e00</span>-<span class="hljs-character">\u9fa5</span>]+)([A-Za-z]+)<br></code></pre></td></tr></table></figure><p>在前中文后英文的情况下添加空格</p><p>或者用</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$1 $2<br></code></pre></td></tr></table></figure><p>替换</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">([A-Za-z]+)([<span class="hljs-character">\u4e00</span>-<span class="hljs-character">\u9fa5</span>]+)<br></code></pre></td></tr></table></figure><p>在前英文后中文的情况下添加空格。</p><p>正则表达式替换的用处还有很多，比如去除注释，更改目标变量名，去除复制时出现的行号等等，在此不再赘述。</p><h3 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h3><p>主要注意事项</p><ol><li><p>在中文文本中应当尽量使用中文标点（全角字符），而不应当混杂英文标点（半角字符）；</p></li><li><p>遇到完整的英文整句、特殊名词，其內容使用半角标点；</p></li><li><p>专有名词使用正确的大小写，不要使用不地道的缩写；</p></li></ol><p>参考链接：<a href="https://mazhuang.org/wiki/chinese-copywriting-guidelines/">https://mazhuang.org/wiki/chinese-copywriting-guidelines/</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文仅供参考，目的在于尽可能构建可读性更高，样式更加统一的文档格式，如有问题，欢迎讨论。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文档规范</tag>
      
      <tag>云顶书院</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day4</title>
    <link href="/2023/01/13/%E6%89%93%E5%8D%A1day4/"/>
    <url>/2023/01/13/%E6%89%93%E5%8D%A1day4/</url>
    
    <content type="html"><![CDATA[<h1 id="今天干的事有点乱"><a href="#今天干的事有点乱" class="headerlink" title="今天干的事有点乱"></a>今天干的事有点乱</h1><h2 id="文档规范"><a href="#文档规范" class="headerlink" title="文档规范"></a>文档规范</h2><p>今天修改上传了第一到九次任务文档时，深感文档之间风格差异与不规范，于是突发奇想决定写一篇文档编写规范，写了有一段时间做了一些参考，考虑到规范推行本就不容易，只能期望其他人在写下一个文档时，可以注意起结构与排版。</p><p>虽然可能可没人看吧？</p><p>写文档时发现了正则表达式的强大，明天可能会吧今天写的文档规范发到博客吧。</p><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>今天简单商量了一下决定了队名和部分技术栈。</p><p>队名就叫八阶线性齐次微分方程组了，大致决定是用vue3。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>今天没有干别的正经事，字节校园每日一题上个月满勤的小礼品浴巾到货了，很开心，今晚有雪。</p><p>明天可能会了解一下正则表达式，同时好好看书。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>云顶书院</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day3</title>
    <link href="/2023/01/12/%E6%89%93%E5%8D%A1day3/"/>
    <url>/2023/01/12/%E6%89%93%E5%8D%A1day3/</url>
    
    <content type="html"><![CDATA[<h1 id="今天做了什么"><a href="#今天做了什么" class="headerlink" title="今天做了什么"></a>今天做了什么</h1><h2 id="字节青训营"><a href="#字节青训营" class="headerlink" title="字节青训营"></a>字节青训营</h2><p>今天观看了开营直播，了解了一下如何拿到结营证书，课程流程，打卡制度，以及最重要的最终的大项目选择，经过讨论，考虑到技术栈以及项目经验，我们八人小组选择了尝试实现一个组件库的项目，但其实仍然很有挑战性。考虑到未来的时间安排，网易云项目我决定暂停对它的进一步了解开发。</p><h2 id="红宝书第2章"><a href="#红宝书第2章" class="headerlink" title="红宝书第2章"></a>红宝书第2章</h2><h3 id="lt-script-gt-元素"><a href="#lt-script-gt-元素" class="headerlink" title="&lt;script&gt;元素"></a>&lt;script&gt;元素</h3><p>使用&lt;script&gt;的方式有两种：通过它直接在网页中嵌入 JavaScript 代码，以及通过它在网页中包含外部 JavaScript 文件。</p><p>嵌入时直接在其中插入代码即可，值得注意的是注意不可以出现字符串&lt;&#x2F;script&gt;，如果需要的话应当用转义字符\将&#x2F;转移，即写作&lt;/script&gt;。</p><p>要包含外部文件中的JavaScript就必须使用src属性。</p><p>在没有使用 defer 和 async 属性时，&lt;script&gt;元素的代码将会从上至下按顺序解析。</p><p>标签位置在body标签之前时，需要加载完所有&lt;script&gt;标签代码页面元素才开始渲染。在此期间浏览器窗口完全空白。为解决这个问题，现代 Web 应用程序通常 将所有 JavaScript 引用放在元素中的页面内容后面。</p><h3 id="lt-script-gt-属性"><a href="#lt-script-gt-属性" class="headerlink" title="&lt;script&gt;属性"></a>&lt;script&gt;属性</h3><p>language，charset属性大多失去了支持，比较有用的有以下几个属性</p><h4 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h4><p>要包含外部文件中的JavaScript就必须使用src属性，其值为一个url指向目标JavaScript代码文件，<strong>这种标签引入的JavaScript代码与行内嵌入的都会阻塞页面加载</strong>。</p><p>注意，使用了 src 属性的&lt;script&gt;元素将不会再被解析，（src属性常见的作用通常可以视为引入外部资源而代替属性所在的标签）。</p><h5 id="JS扩展名"><a href="#JS扩展名" class="headerlink" title="JS扩展名"></a>JS扩展名</h5><p>特别的是，<strong>外部 JavaScript 文件的扩展名可以不是.js</strong>。因为浏览器不会检查所包含 JavaScript 文件的扩展名。这就为使用服务器端脚本语言动态生成 JavaScript 代码，或者在浏览器中将 JavaScript 扩展语言（如 TypeScript，或React的 JSX）转译为JavaScript 提供了可能性。不过要注意，服务器经常会根据文件扩展来确定响应的正确 MIME 类型。如果不打算使用.js 扩展名，一定要确保服务器能返回正确的 MIME 类型。</p><h5 id="MIME是啥"><a href="#MIME是啥" class="headerlink" title="MIME是啥"></a>MIME是啥</h5><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。</p><p>详细信息可参考<a href="https://www.runoob.com/http/mime-types.html">MIME 类型 | 菜鸟教程 (runoob.com)</a></p><h4 id="defer-属性"><a href="#defer-属性" class="headerlink" title="defer 属性"></a>defer 属性</h4><p><strong>defer 属性只对外部脚本文件才有效。</strong></p><p>这个属性表示脚本在执行的时候不会改 变页面的结构。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在&lt;script&gt;元素上设置 defer 属性，相当于告诉浏览器立即下载，但延迟执行。</p><p>HTML5 规范要求脚本应该按照它们出现的顺序执行，因此第一个推迟的脚 本会在第二个推迟的脚本之前执行，而且两者都会在 DOMContentLoaded 事件之前执行。不过在实际当中，推迟执行的脚本不一定总会按顺序执行或者在 DOMContentLoaded 事件之前执行，因此最好只包含一个这样的脚本。当然，更好的做法应当是直接把标签放置在页面文档底部</p><h4 id="async-属性"><a href="#async-属性" class="headerlink" title="async 属性"></a>async 属性</h4><p>同样只适用于外部脚本，拥有该属性的&lt;script&gt;标签代码将会异步加载这也导致了多个异步脚本之间的执行顺序不确定，同时这类脚本也不应当在加载期间修改DOM。</p><p>异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded 之前或之后。</p><h3 id="动态加载脚本"><a href="#动态加载脚本" class="headerlink" title="动态加载脚本"></a>动态加载脚本</h3><p>因为 JavaScript 可以使用 DOM API，所以通过 向 DOM 中动态添加 script 元素同样可以加载指定的脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br><br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;gibberish.js&#x27;</span>;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script); <br><br></code></pre></td></tr></table></figure><p>默认情况下， 以这种方式创建的&lt;script&gt;元素是以异步方式加载的，相当于添加了 async 属性。如果想要统一动态加载脚本的行为，可以明确修改script标签的async属性为false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br><br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;gibberish.js&#x27;</span>;<br><br>script.<span class="hljs-property">async</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br><br></code></pre></td></tr></table></figure><p>以这种方式获取的资源对浏览器预加载器是不可见的。这会严重影响它们在资源获取队列中的优先级。根据应用程序的工作方式以及怎么使用，这种方式可能会严重影响性能。要想让预加载器知道这些动态请求文件的存在，可以在文档头部显式声明它们：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;gibberish.js&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt;元素"></a>&lt;noscript&gt;元素</h3><p>元素可以包含任何可以出现在中的 HTML 元素，当浏览器禁用活不支持（几乎不可能）JavaScript 时，浏览器将显示包含在中的内容。</p><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><p>今天依然没有养成良好的作息，由于青训营的正式开课时间在1月15日 - 2月13日，所以明天和后天仍然比较轻松。将继续阅读JavaScript高级程序设计。</p><h2 id="hexo报错"><a href="#hexo报错" class="headerlink" title="hexo报错"></a>hexo报错</h2><p>在运行hexo g命令时出现 ERROR Process failed: 文档名</p><p>经过排查结果为文档语法错误导致的无法解析，先已处理</p><p>由于页面左侧目录宽度有限，建议文档目录结构不要高于四层，最好三层。小标题字数在五字到七字左右。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>JavaScript高级程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day2</title>
    <link href="/2023/01/11/%E6%89%93%E5%8D%A1day2/"/>
    <url>/2023/01/11/%E6%89%93%E5%8D%A1day2/</url>
    
    <content type="html"><![CDATA[<h1 id="反思摸鱼的一天"><a href="#反思摸鱼的一天" class="headerlink" title="反思摸鱼的一天"></a>反思摸鱼的一天</h1><h2 id="干了什么"><a href="#干了什么" class="headerlink" title="干了什么"></a>干了什么</h2><p>今天没有实际性产出，上午在微信QQ群之间八卦，下午洗澡收拾家里，晚上被朋友约出去剃头。</p><h2 id="感觉如何"><a href="#感觉如何" class="headerlink" title="感觉如何"></a>感觉如何</h2><p>就这样碌碌无为地度过了一天，感觉更焦虑了一点，但其实也不是很意外。</p><h2 id="为什么会这样"><a href="#为什么会这样" class="headerlink" title="为什么会这样"></a>为什么会这样</h2><p>自从放假以来，睡眠一向不规律，晚上经常一两点睡觉，甚至四五点，睡到接近中午才起床，经常这样子，感觉这不太好。那么从今晚就改了吧（试试十二点睡）。</p><p>自从自己感染新冠之后，只有前两天症状很重，第二周时大概只有咳嗽了，但一周半都没有好，前些日子才好起来。而我在这几乎三周里都没有洗澡没有出门，很折磨，所以今天迫不及待地洗澡换衣服收拾房间，大晚上还出去朋友家坐了一会，虽然感觉不学习的一天有些焦虑，但真的很想和朋友见面，出门呼吸清凉的风，痛痛快快洗个澡。偶尔这样似乎也不坏，毕竟劳逸结合嘛。</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>需要调整作息，从早睡早起开始，不至于一整天没有时间干正事。</p><p>可以适当地放松，如果焦虑的话，明天就加把劲干。</p><h2 id="明天要做的"><a href="#明天要做的" class="headerlink" title="明天要做的"></a>明天要做的</h2><p>回顾《 JavaScript 高级程序设计》第2章和第3章，做好笔记，看字节青训营的开营直播，适当记录。看之前那个网易云网页项目，尝试完善，回顾vue。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一个百日计划</tag>
      
      <tag>摸鱼</tag>
      
      <tag>反思</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day1</title>
    <link href="/2023/01/10/%E6%89%93%E5%8D%A1day1/"/>
    <url>/2023/01/10/%E6%89%93%E5%8D%A1day1/</url>
    
    <content type="html"><![CDATA[<h1 id="今天的一丁点学习"><a href="#今天的一丁点学习" class="headerlink" title="今天的一丁点学习"></a>今天的一丁点学习</h1><h2 id="项目运行报错"><a href="#项目运行报错" class="headerlink" title="项目运行报错"></a>项目运行报错</h2><p>试图运行从gitee上扒下来的源码（网址<a href="https://gitee.com/PengGeee/vue_cloud_music?_from=gitee_search">vue_cloud_music (gitee.com)</a>）出现过以下问题</p><h3 id="下载依赖报错"><a href="#下载依赖报错" class="headerlink" title="下载依赖报错"></a>下载依赖报错</h3><ol><li>error:0308010C:digital envelope routines::unsupported</li></ol><p>原因是nodejs17版本的部分破坏性更新，参考链接：<a href="https://stackoverflow.com/questions/69692842/error-message-error0308010cdigital-envelope-routinesunsupported">Stack Overflow</a></p><p>解决方案：利用nvm切换node版本为16.+</p><ol start="2"><li>npm ERR! code ERESOLVE npm ERR! ERESOLVE could not resolve</li></ol><p>原因是npm版本与nodejs不对应</p><p>解决方案：<strong>npm 配置集旧版-对等-对等值设置为 true</strong></p><p>即运行命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set legacy-peer-deps true<br></code></pre></td></tr></table></figure><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><p>登录时账号密码错误无反馈，明天改</p><h2 id="第五届字节跳动青训营"><a href="#第五届字节跳动青训营" class="headerlink" title="第五届字节跳动青训营"></a>第五届字节跳动青训营</h2><p>1月7日 的时候经历了一场笔试，选择都不难，问答题问vue与react的区别特点有点不妙，之前没了解过react；两道算法题一道是判断回文，一道是最长无重复项字符串，前一道题用例有百分之二十多没过，怎么改都没过，没想明白，本来感觉完了，今天下午发邮件通知过了，很开心。</p><p>下午花了些时间找队友，简单聊了聊，在掘金遇到了有缘人加了微信。</p><p>12日 就要正式开营了，有点紧张。</p><h2 id="红宝书"><a href="#红宝书" class="headerlink" title="红宝书"></a>红宝书</h2><p>今天看的不多，中途去搞青训营的事了，简单了解了一下 JS 的发展，没有看到太多干货，明天从第二章重新开始看吧，一边看一边做笔记吧。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节青训营</tag>
      
      <tag>第一个百日计划</tag>
      
      <tag>JavaScript高级程序设计</tag>
      
      <tag>报错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打卡day0</title>
    <link href="/2023/01/10/%E6%89%93%E5%8D%A1day0/"/>
    <url>/2023/01/10/%E6%89%93%E5%8D%A1day0/</url>
    
    <content type="html"><![CDATA[<h1 id="努力不再碌碌无为"><a href="#努力不再碌碌无为" class="headerlink" title="努力不再碌碌无为"></a>努力不再碌碌无为</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在是个人博客网站搭建好第145天，说来惭愧，自从大一暑假心血来潮用hexo在github上搭好以后就没有再关注过这里，直到这学期寒假才想起这回事。同时也很久都没有写文档了，Markdown也有点手生了，正好是还算一月初，浅浅回顾一下去年的学习。</p><h2 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h2><p>首先就是感觉自己学的不是很扎实，大一下半学期没有好好学，vue全家桶只是堪堪会用，后来也没有真正手写过一整个项目，就很生疏，时间就匆匆忙忙随随便便过去了。暑假时忙着自己出去玩，没有好好看nodejs相关。</p><h2 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h2><p>下半年就是书院招新，带新生，以及抽时间补了一点暑假没有好好学的后端基础（所谓全栈~），下半年似乎过得很快（事实上也很短），猝不及防地回到家，心惊胆战地考完了期末考试，就到了现在。前段时间还染了新冠，难受了好一段时间，现在也好的差不多啦，现在要做的就是明确方向地跑起来！</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>按理来说，现在已经是准备面试的阶段了，一年半的大学最近半年才算是有点方向，最近做一个仿网易云项目练手，顺便巩固基础，学习新知，准备下个学期面一些日常实习，现在我的问题很多，计网，算法都不熟，有人这个年级已经在造轮子啦，我还是个切图仔~。</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>现在就是要力扣刷起来，计网学起来，看红宝书巩固巩固我那点js，项目做完会继续完善下去，部署到服务器，整个流程至少走一遍。博客会逐渐完善起来的，现在就是要踏实下来，不能得过且过，（堕落的日子一定要结束的！），大胆地定下第一个百日计划，在从今天起的百日内开始面试。</p><p>就是这样 ~</p>]]></content>
    
    
    <categories>
      
      <category>第一个百日计划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第一个百日计划</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
